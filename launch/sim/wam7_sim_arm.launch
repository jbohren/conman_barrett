<launch>
  <arg name="planning" default="false" doc="(bool) Launch the motion planing pipeline"/>
  <arg name="empty" default="false" doc="(bool) Launch the robot with an open palm"/>
  <arg name="hand" default="false" doc="(bool) Launch the robot with a hand"/>
  <arg name="ball" default="false" doc="(bool) Launch the robot with a ball"/>
  <arg name="bumblebee" default="false" doc="(bool) Launch the robot with a bumblebee"/>
  <arg name="initial_group" default="joint_control" doc="(string) Initial active controller group"/>
  <arg name="dash" default="true" doc="(bool) If true, display the barrett dashboard."/>
  <arg name="x" default="0.04" doc="(float) x coordinates of the WAM arm"/>
  <arg name="y" default="0.46" doc="(float) y coordinates of the WAM arm"/>
  <arg name="z" default="1.00" doc="(float) z coordinates of the WAM arm"/>

  <arg name="rescuer" default="false" doc="(bool) If true, use the singularity rescuer."/>

  <arg name="tf_prefix" default="$(arg tf_prefix)" doc="(string) TF frame prefix, used as robot name"/>
  <arg name="oro_prefix" default="" doc="(string) orocos prefix"/>
  <arg name="lua_script" default="wam_sim.lua" doc="(string) name of the lua script to initialize the arm"/>

  <arg name="j0" default="0.0" doc="(float) Joint 0 initial position"/>
  <arg name="j1" default="0.0" doc="(float) Joint 1 initial position"/>
  <arg name="j2" default="0.0" doc="(float) Joint 2 initial position"/>
  <arg name="j3" default="0.0" doc="(float) Joint 3 initial position"/>
  <arg name="j4" default="0.0" doc="(float) Joint 4 initial position"/>
  <arg name="j5" default="0.0" doc="(float) Joint 5 initial position"/>
  <arg name="j6" default="0.0" doc="(float) Joint 6 initial position"/>

  <group ns="$(arg tf_prefix)">
    <!-- Load WAM URDF -->
    <param name="robot_description"
      command="$(find xacro)/xacro.py '$(find lcsr_barrett)/launch/sim/wam7_sim.urdf.xacro'
      prefix:=$(arg tf_prefix)
      manager_name:=$(arg oro_prefix)barrett_manager
      xyz:='$(arg x) $(arg y) $(arg z)'
      lua_script:='$(arg lua_script)'
      hand:=$(arg hand) ball:=$(arg ball)
      initial_group:=$(arg initial_group)" />
  </group>

  <!-- Spawn the robot in Gazebo -->
  <node name="$(anon urdf_spawner)"
    pkg="gazebo_ros"
    type="spawn_model"
    respawn="false"
    output="screen"
    args="-urdf -model $(arg tf_prefix) -param /$(arg tf_prefix)/robot_description
    -J $(arg tf_prefix)/base_yaw_joint $(arg j0)
    -J $(arg tf_prefix)/shoulder_pitch_joint $(arg j1)
    -J $(arg tf_prefix)/shoulder_yaw_joint $(arg j2)
    -J $(arg tf_prefix)/elbow_pitch_joint $(arg j3)
    -J $(arg tf_prefix)/wrist_yaw_joint $(arg j4)
    -J $(arg tf_prefix)/wrist_pitch_joint $(arg j5)
    -J $(arg tf_prefix)/palm_yaw_joint $(arg j6)"/>

  <!-- Create nodes in gazebo namespace -->
  <group ns="gazebo">

    <group ns="$(arg oro_prefix)barrett_manager">

      <node if="$(arg dash)" pkg="rqt_barrett" type="rqt_barrett" name="rqt_barrett">
        <remap from="robot_description" to="/$(arg tf_prefix)/robot_description"/>
        <remap from="joint_states" to="wam/joint_states"/>
      </node>
      <node pkg="joint_state_publisher" type="joint_state_publisher" name="$(anon joint_state_publisher)">
        <rosparam param="source_list" subst_value="true">
          ["wam/joint_states", "hand/joint_states"]
        </rosparam>
        <param name="rate" value="50"/>
        <remap from="robot_description" to="/$(arg tf_prefix)/robot_description"/>
      </node>
      <node pkg="robot_state_publisher" type="robot_state_publisher" name="$(anon robot_state_publisher)">
        <remap from="robot_description" to="/$(arg tf_prefix)/robot_description"/>
        <param name="publish_frequency" value="50"/>
      </node>

      <rosparam subst_value="true">
        # Auto-configuration
        auto_configure_wam: true
        auto_configure_hand: $(arg hand)
        wam_dof: 7
        wam_urdf_prefix: $(arg tf_prefix)

        # WAM Parameters
        wam:
          velocity_smoothing_factor: 0.98
      </rosparam>

      <!-- If using the BHand -->
      <group if="$(arg hand)">
        <param name="hand_urdf_prefix" value="$(arg tf_prefix)/hand"/>

        <!-- Mid-Level hand interface -->
        <node name="bhand_action_server"
          pkg="oro_barrett_interface"
          type="bhand_action_server.py"
          output="screen"/>
      </group>

    </group>

    <!-- Barrett Hardwre Config and Orocos Components -->
    <include file="$(find lcsr_barrett)/launch/sim/orocos_component_params.launch">
      <arg name="ee_empty" value="$(arg empty)"/>
      <arg name="ee_ball" value="$(arg ball)"/>
      <arg name="ee_bumblebee" value="$(arg bumblebee)"/>
      <arg name="ee_hand" value="$(arg hand)"/>
      <arg name="tf_prefix" value="$(arg tf_prefix)"/>
      <arg name="oro_prefix" value="$(arg oro_prefix)"/>
    </include>

    <rosparam ns="$(arg oro_prefix)effort_sum" subst_value="true">
      dim: 7
      require_heartbeat: false
      heartbeat_max_period: 0.075
    </rosparam>

    <!-- Moveit -->
    <include if="$(arg planning)" file="$(find lcsr_barrett)/launch/sim/wam7_planning.launch">
      <arg name="joint_states_topic" value="$(arg oro_prefix)barrett_manager/joint_states"/>
      <arg name="ee_empty" value="$(arg empty)"/>
      <arg name="ee_hand" value="$(arg hand)"/>
      <arg name="ee_ball" value="$(arg ball)"/>
      <arg name="oro_prefix" value="$(arg oro_prefix)"/>
      <arg name="tf_prefix" value="$(arg tf_prefix)"/>
    </include>

    <!-- Run singularity rescuer -->
    <include
      if="$(arg rescuer)"
      file="$(find lcsr_barrett)/launch/singularity_rescuer.launch">
      <arg name="ee_empty" value="$(arg empty)"/>
      <arg name="ee_hand" value="$(arg hand)"/>
      <arg name="ee_ball" value="$(arg ball)"/>
      <arg name="oro_prefix" value="$(arg oro_prefix)"/>
      <arg name="tf_prefix" value="$(arg tf_prefix)"/>
    </include>

  </group>

</launch>
